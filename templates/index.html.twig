{# templates/tortoise/index.html.twig #}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tortoise Directions</title>
    <link href="https://unpkg.com/@tabler/core@latest/dist/css/tabler.min.css" rel="stylesheet">
    <style>
        .result {
            margin-top: 20px;
            font-weight: bold;
        }

        .grid-container {
            margin-top: 20px;
        }

        #gridCanvas {
            border: 1px solid #000;
            width: 100%;
            height: 100%;
        }
    </style>
</head>
<body>
<div class="page">
    <div class="container-xl">
        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h1>Tortoise Directions</h1>
                    </div>
                    <div class="card-body">
                        {{ form_start(form) }}
                        {{ form_row(form.directions) }}
                        <div class="form-footer">
                            {{ form_row(form.submit) }}
                        </div>
                        {{ form_end(form) }}
                        <div class="result" id="result"></div>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h2>Grid Visualization</h2>
                    </div>
                    <div class="card-body">
                        <div class="grid-container">
                            <canvas id="gridCanvas" width="500" height="500"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://unpkg.com/@tabler/core@latest/dist/js/tabler.min.js"></script>
<script>
    document.getElementById('directionForm').addEventListener('submit', function (event) {
        event.preventDefault();
        const directions = document.getElementById('directions').value;
        const result = calculateFinalPosition(directions);
        document.getElementById('result').innerText = `Final Position: (${result.x}, ${result.y}), Facing: ${result.direction}`;
        visualizeGrid(result.path);
    });

    function calculateFinalPosition(input) {
        let x = 0, y = 0;
        const directions = ['N', 'E', 'S', 'W'];
        let currentDirectionIndex = 0;
        const path = [{x: x, y: y}];

        for (let i = 0; i < input.length; i++) {
            const command = input[i];
            if (command === 'F') {
                switch (directions[currentDirectionIndex]) {
                    case 'N':
                        y++;
                        break;
                    case 'E':
                        x++;
                        break;
                    case 'S':
                        y--;
                        break;
                    case 'W':
                        x--;
                        break;
                }
                path.push({x: x, y: y});
            } else if (command === 'R') {
                currentDirectionIndex = (currentDirectionIndex + 1) % 4;
            } else if (command === 'L') {
                currentDirectionIndex = (currentDirectionIndex + 3) % 4;
            }
        }
        return {x, y, direction: directions[currentDirectionIndex], path: path};
    }

    function visualizeGrid(path) {
        const canvas = document.getElementById('gridCanvas');
        const ctx = canvas.getContext('2d');
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        const gridSize = 50;
        const offsetX = canvas.width / 2;
        const offsetY = canvas.height / 2;

        // Draw grid lines
        ctx.strokeStyle = '#ddd';
        for (let x = 0; x <= canvas.width; x += gridSize) {
            ctx.beginPath();
            ctx.moveTo(x, 0);
            ctx.lineTo(x, canvas.height);
            ctx.stroke();
        }
        for (let y = 0; y <= canvas.height; y += gridSize) {
            ctx.beginPath();
            ctx.moveTo(0, y);
            ctx.lineTo(canvas.width, y);
            ctx.stroke();
        }

        // Draw axes
        ctx.strokeStyle = '#000';
        ctx.beginPath();
        ctx.moveTo(offsetX, 0);
        ctx.lineTo(offsetX, canvas.height);
        ctx.stroke();
        ctx.beginPath();
        ctx.moveTo(0, offsetY);
        ctx.lineTo(canvas.width, offsetY);
        ctx.stroke();

        // Draw path
        ctx.strokeStyle = 'blue';
        ctx.lineWidth = 2;
        ctx.beginPath();
        ctx.moveTo(offsetX + path[0].x * gridSize, offsetY - path[0].y * gridSize);
        for (let i = 1; i < path.length; i++) {
            ctx.lineTo(offsetX + path[i].x * gridSize, offsetY - path[i].y * gridSize);
        }
        ctx.stroke();

        // Draw tortoise at the final position
        const finalPosition = path[path.length - 1];
        ctx.fillStyle = 'yellow';
        ctx.fillRect(offsetX + finalPosition.x * gridSize - gridSize / 2, offsetY - finalPosition.y * gridSize - gridSize / 2, gridSize, gridSize);
        ctx.fillStyle = 'black';
        ctx.fillText(finalPosition.direction, offsetX + finalPosition.x * gridSize - 10, offsetY - finalPosition.y * gridSize + 5);
    }
</script>

</body>
</html>
